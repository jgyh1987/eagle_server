// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/playerDataSave.proto

#ifndef PROTOBUF_proto_2fplayerDataSave_2eproto__INCLUDED
#define PROTOBUF_proto_2fplayerDataSave_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fplayerDataSave_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServerInfoImpl();
void InitDefaultsServerInfo();
void InitDefaultsServerInfo2Impl();
void InitDefaultsServerInfo2();
void InitDefaultsServerInfoArrayImpl();
void InitDefaultsServerInfoArray();
inline void InitDefaults() {
  InitDefaultsServerInfo();
  InitDefaultsServerInfo2();
  InitDefaultsServerInfoArray();
}
}  // namespace protobuf_proto_2fplayerDataSave_2eproto
namespace protobuf {
namespace serialize {
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerInfo2;
class ServerInfo2DefaultTypeInternal;
extern ServerInfo2DefaultTypeInternal _ServerInfo2_default_instance_;
class ServerInfoArray;
class ServerInfoArrayDefaultTypeInternal;
extern ServerInfoArrayDefaultTypeInternal _ServerInfoArray_default_instance_;
}  // namespace serialize
}  // namespace protobuf
namespace protobuf {
namespace serialize {

// ===================================================================

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.serialize.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string areaName = 3;
  void clear_areaname();
  static const int kAreaNameFieldNumber = 3;
  const ::std::string& areaname() const;
  void set_areaname(const ::std::string& value);
  #if LANG_CXX11
  void set_areaname(::std::string&& value);
  #endif
  void set_areaname(const char* value);
  void set_areaname(const char* value, size_t size);
  ::std::string* mutable_areaname();
  ::std::string* release_areaname();
  void set_allocated_areaname(::std::string* areaname);

  // string serverName = 4;
  void clear_servername();
  static const int kServerNameFieldNumber = 4;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protobuf.serialize.ServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr areaname_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 status_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fplayerDataSave_2eproto::TableStruct;
  friend void ::protobuf_proto_2fplayerDataSave_2eproto::InitDefaultsServerInfoImpl();
};
// -------------------------------------------------------------------

class ServerInfo2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.serialize.ServerInfo2) */ {
 public:
  ServerInfo2();
  virtual ~ServerInfo2();

  ServerInfo2(const ServerInfo2& from);

  inline ServerInfo2& operator=(const ServerInfo2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo2(ServerInfo2&& from) noexcept
    : ServerInfo2() {
    *this = ::std::move(from);
  }

  inline ServerInfo2& operator=(ServerInfo2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo2* internal_default_instance() {
    return reinterpret_cast<const ServerInfo2*>(
               &_ServerInfo2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServerInfo2* other);
  friend void swap(ServerInfo2& a, ServerInfo2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo2* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfo2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfo2& from);
  void MergeFrom(const ServerInfo2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfo2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protobuf.serialize.ServerInfo2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fplayerDataSave_2eproto::TableStruct;
  friend void ::protobuf_proto_2fplayerDataSave_2eproto::InitDefaultsServerInfo2Impl();
};
// -------------------------------------------------------------------

class ServerInfoArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.serialize.ServerInfoArray) */ {
 public:
  ServerInfoArray();
  virtual ~ServerInfoArray();

  ServerInfoArray(const ServerInfoArray& from);

  inline ServerInfoArray& operator=(const ServerInfoArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoArray(ServerInfoArray&& from) noexcept
    : ServerInfoArray() {
    *this = ::std::move(from);
  }

  inline ServerInfoArray& operator=(ServerInfoArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoArray* internal_default_instance() {
    return reinterpret_cast<const ServerInfoArray*>(
               &_ServerInfoArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ServerInfoArray* other);
  friend void swap(ServerInfoArray& a, ServerInfoArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoArray* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfoArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfoArray& from);
  void MergeFrom(const ServerInfoArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfoArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .protobuf.serialize.ServerInfo serverList = 1;
  bool has_serverlist() const;
  void clear_serverlist();
  static const int kServerListFieldNumber = 1;
  const ::protobuf::serialize::ServerInfo& serverlist() const;
  ::protobuf::serialize::ServerInfo* release_serverlist();
  ::protobuf::serialize::ServerInfo* mutable_serverlist();
  void set_allocated_serverlist(::protobuf::serialize::ServerInfo* serverlist);

  // @@protoc_insertion_point(class_scope:protobuf.serialize.ServerInfoArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::protobuf::serialize::ServerInfo* serverlist_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fplayerDataSave_2eproto::TableStruct;
  friend void ::protobuf_proto_2fplayerDataSave_2eproto::InitDefaultsServerInfoArrayImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfo

// string ip = 1;
inline void ServerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:protobuf.serialize.ServerInfo.ip)
  return ip_.GetNoArena();
}
inline void ServerInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.serialize.ServerInfo.ip)
}
#if LANG_CXX11
inline void ServerInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.serialize.ServerInfo.ip)
}
#endif
inline void ServerInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.serialize.ServerInfo.ip)
}
inline void ServerInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.serialize.ServerInfo.ip)
}
inline ::std::string* ServerInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.serialize.ServerInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:protobuf.serialize.ServerInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protobuf.serialize.ServerInfo.ip)
}

// uint32 port = 2;
inline void ServerInfo::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:protobuf.serialize.ServerInfo.port)
  return port_;
}
inline void ServerInfo::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:protobuf.serialize.ServerInfo.port)
}

// string areaName = 3;
inline void ServerInfo::clear_areaname() {
  areaname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::areaname() const {
  // @@protoc_insertion_point(field_get:protobuf.serialize.ServerInfo.areaName)
  return areaname_.GetNoArena();
}
inline void ServerInfo::set_areaname(const ::std::string& value) {
  
  areaname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.serialize.ServerInfo.areaName)
}
#if LANG_CXX11
inline void ServerInfo::set_areaname(::std::string&& value) {
  
  areaname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.serialize.ServerInfo.areaName)
}
#endif
inline void ServerInfo::set_areaname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  areaname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.serialize.ServerInfo.areaName)
}
inline void ServerInfo::set_areaname(const char* value, size_t size) {
  
  areaname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.serialize.ServerInfo.areaName)
}
inline ::std::string* ServerInfo::mutable_areaname() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.serialize.ServerInfo.areaName)
  return areaname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_areaname() {
  // @@protoc_insertion_point(field_release:protobuf.serialize.ServerInfo.areaName)
  
  return areaname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_areaname(::std::string* areaname) {
  if (areaname != NULL) {
    
  } else {
    
  }
  areaname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), areaname);
  // @@protoc_insertion_point(field_set_allocated:protobuf.serialize.ServerInfo.areaName)
}

// string serverName = 4;
inline void ServerInfo::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::servername() const {
  // @@protoc_insertion_point(field_get:protobuf.serialize.ServerInfo.serverName)
  return servername_.GetNoArena();
}
inline void ServerInfo::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.serialize.ServerInfo.serverName)
}
#if LANG_CXX11
inline void ServerInfo::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.serialize.ServerInfo.serverName)
}
#endif
inline void ServerInfo::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.serialize.ServerInfo.serverName)
}
inline void ServerInfo::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.serialize.ServerInfo.serverName)
}
inline ::std::string* ServerInfo::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.serialize.ServerInfo.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_servername() {
  // @@protoc_insertion_point(field_release:protobuf.serialize.ServerInfo.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:protobuf.serialize.ServerInfo.serverName)
}

// uint32 status = 5;
inline void ServerInfo::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::status() const {
  // @@protoc_insertion_point(field_get:protobuf.serialize.ServerInfo.status)
  return status_;
}
inline void ServerInfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:protobuf.serialize.ServerInfo.status)
}

// -------------------------------------------------------------------

// ServerInfo2

// uint32 status = 1;
inline void ServerInfo2::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo2::status() const {
  // @@protoc_insertion_point(field_get:protobuf.serialize.ServerInfo2.status)
  return status_;
}
inline void ServerInfo2::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:protobuf.serialize.ServerInfo2.status)
}

// uint32 port = 2;
inline void ServerInfo2::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo2::port() const {
  // @@protoc_insertion_point(field_get:protobuf.serialize.ServerInfo2.port)
  return port_;
}
inline void ServerInfo2::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:protobuf.serialize.ServerInfo2.port)
}

// -------------------------------------------------------------------

// ServerInfoArray

// .protobuf.serialize.ServerInfo serverList = 1;
inline bool ServerInfoArray::has_serverlist() const {
  return this != internal_default_instance() && serverlist_ != NULL;
}
inline void ServerInfoArray::clear_serverlist() {
  if (GetArenaNoVirtual() == NULL && serverlist_ != NULL) {
    delete serverlist_;
  }
  serverlist_ = NULL;
}
inline const ::protobuf::serialize::ServerInfo& ServerInfoArray::serverlist() const {
  const ::protobuf::serialize::ServerInfo* p = serverlist_;
  // @@protoc_insertion_point(field_get:protobuf.serialize.ServerInfoArray.serverList)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::serialize::ServerInfo*>(
      &::protobuf::serialize::_ServerInfo_default_instance_);
}
inline ::protobuf::serialize::ServerInfo* ServerInfoArray::release_serverlist() {
  // @@protoc_insertion_point(field_release:protobuf.serialize.ServerInfoArray.serverList)
  
  ::protobuf::serialize::ServerInfo* temp = serverlist_;
  serverlist_ = NULL;
  return temp;
}
inline ::protobuf::serialize::ServerInfo* ServerInfoArray::mutable_serverlist() {
  
  if (serverlist_ == NULL) {
    serverlist_ = new ::protobuf::serialize::ServerInfo;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.serialize.ServerInfoArray.serverList)
  return serverlist_;
}
inline void ServerInfoArray::set_allocated_serverlist(::protobuf::serialize::ServerInfo* serverlist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serverlist_;
  }
  if (serverlist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serverlist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serverlist, submessage_arena);
    }
    
  } else {
    
  }
  serverlist_ = serverlist;
  // @@protoc_insertion_point(field_set_allocated:protobuf.serialize.ServerInfoArray.serverList)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialize
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fplayerDataSave_2eproto__INCLUDED
