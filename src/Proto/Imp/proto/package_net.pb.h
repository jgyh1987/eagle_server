// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/package_net.proto

#ifndef PROTOBUF_proto_2fpackage_5fnet_2eproto__INCLUDED
#define PROTOBUF_proto_2fpackage_5fnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fpackage_5fnet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPackageNetImpl();
void InitDefaultsPackageNet();
inline void InitDefaults() {
  InitDefaultsPackageNet();
}
}  // namespace protobuf_proto_2fpackage_5fnet_2eproto
namespace protocol {
class PackageNet;
class PackageNetDefaultTypeInternal;
extern PackageNetDefaultTypeInternal _PackageNet_default_instance_;
}  // namespace protocol
namespace protocol {

// ===================================================================

class PackageNet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PackageNet) */ {
 public:
  PackageNet();
  virtual ~PackageNet();

  PackageNet(const PackageNet& from);

  inline PackageNet& operator=(const PackageNet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageNet(PackageNet&& from) noexcept
    : PackageNet() {
    *this = ::std::move(from);
  }

  inline PackageNet& operator=(PackageNet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageNet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageNet* internal_default_instance() {
    return reinterpret_cast<const PackageNet*>(
               &_PackageNet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PackageNet* other);
  friend void swap(PackageNet& a, PackageNet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageNet* New() const PROTOBUF_FINAL { return New(NULL); }

  PackageNet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PackageNet& from);
  void MergeFrom(const PackageNet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PackageNet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional string sign = 3;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 3;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.PackageNet)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_body();
  void clear_has_body();
  void set_has_sign();
  void clear_has_sign();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_proto_2fpackage_5fnet_2eproto::TableStruct;
  friend void ::protobuf_proto_2fpackage_5fnet_2eproto::InitDefaultsPackageNetImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackageNet

// required int32 id = 1;
inline bool PackageNet::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageNet::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackageNet::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackageNet::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PackageNet::id() const {
  // @@protoc_insertion_point(field_get:protocol.PackageNet.id)
  return id_;
}
inline void PackageNet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PackageNet.id)
}

// required bytes body = 2;
inline bool PackageNet::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageNet::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageNet::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageNet::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& PackageNet::body() const {
  // @@protoc_insertion_point(field_get:protocol.PackageNet.body)
  return body_.GetNoArena();
}
inline void PackageNet::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PackageNet.body)
}
#if LANG_CXX11
inline void PackageNet::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PackageNet.body)
}
#endif
inline void PackageNet::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PackageNet.body)
}
inline void PackageNet::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PackageNet.body)
}
inline ::std::string* PackageNet::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:protocol.PackageNet.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageNet::release_body() {
  // @@protoc_insertion_point(field_release:protocol.PackageNet.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageNet::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:protocol.PackageNet.body)
}

// optional string sign = 3;
inline bool PackageNet::has_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageNet::set_has_sign() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageNet::clear_has_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageNet::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
inline const ::std::string& PackageNet::sign() const {
  // @@protoc_insertion_point(field_get:protocol.PackageNet.sign)
  return sign_.GetNoArena();
}
inline void PackageNet::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PackageNet.sign)
}
#if LANG_CXX11
inline void PackageNet::set_sign(::std::string&& value) {
  set_has_sign();
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PackageNet.sign)
}
#endif
inline void PackageNet::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PackageNet.sign)
}
inline void PackageNet::set_sign(const char* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PackageNet.sign)
}
inline ::std::string* PackageNet::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:protocol.PackageNet.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageNet::release_sign() {
  // @@protoc_insertion_point(field_release:protocol.PackageNet.sign)
  clear_has_sign();
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageNet::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:protocol.PackageNet.sign)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fpackage_5fnet_2eproto__INCLUDED
